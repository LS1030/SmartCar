#ifndef _MIDDLE_EXTRACT_H_
#define _MIDDLE_EXTRACT_H_

/*------------------------------宏定义区--------------------------------*/

#define TINGCHE_HUDU       125

#define ROW_INTERVAL       2            //最小二乘法求斜率两点行间距

#define INV_ERROR          200
#define ROAD_WIDE          160          //逆透视图像赛道宽度
#define ROAD_LOOP_WIDE     160 
#define MID_ADD            160          //中线补充最大距离（逆透视单位）
#define loop_in_k          1.0          //入环平移宽度系数
#define loop_in_k_1        0.8          //环丢边平移宽度系数

#define LOOP_OUT_NUM       10             //环道丢边平移行数
#define LOOP_OUT_ADD       15             //环道出口行处理

#define L_TINGCHE_WIDE     40             //左停车平移宽度
#define R_TINGCHE_WIDE     40             //右停车平移宽度


  /**逆透视校正参数**/

#define INV_A 8.3026
#define INV_B  0
#define INV_C -668.3553
#define INV_D   0
#define INV_E  -12.6121
#define INV_F  884.3799
#define INV_G  0
#define INV_H 0.08971
//rot = [ 8.3026, 2.8477e-12, -668.3553; -2.9995e-13, -12.6121, 884.3799; -3.6189e-14, 0.08971, 1 ]
//rot = [ 8.3026, 2.8477e-12, -668.3553; -2.9995e-13, -12.6121, 884.3799; -3.6189e-14, 0.08971, 1 ]
//rot = [ 8.3172, -1.9476e-13, -669.533; -9.6106e-13, -12.5991, 885.9031; -6.8161e-14, 0.09163, 1 ]
//rot = [ 9.3005, 8.5951e-13, -748.6897; 2.1238e-13, -12.5123, 896.0591; 8.6687e-14, 0.10443, 1 ]
//rot = [ 8.7896, 0.29795, -712.2533; -5.5459e-13, -12.5512, 891.5084; 7.7275e-15, 0.098696, 1 ]
//rot = [ 8.7732, 0.1487, -710.7807; -1.2773e-12, -12.5651, 889.8885; 5.2288e-14, 0.096654, 1 ]
//rot = [ 8.3099, -0.49296, -660.1408; 3.6087e-13, -12.6056, 885.1408; -9.2441e-14, 0.090669, 1 ]
//rot = [ 7.8667, -0.4, -621.0667; -3.8012e-13, -12.6667, 878; 9.0613e-14, 0.081667, 1 ]
//rot = [ 8.2807, -0.35088, -666.2456; -1.324e-13, -12.6316, 882.1053; -9.5603e-15, 0.086842, 1 ]
//rot = [ 7.8996, -0.20084, -631.7657; 1.7358e-13, -12.636, 881.59; 3.6592e-14, 0.086192, 1 ]
//rot = [ 7.5762, -0.064205, -617.3997; -6.2911e-13, -12.8315, 884.0995; 2.0824e-14, 0.089085, 1 ]
//rot = [ 8.2016, -0.13901, -668.2884; -8.6628e-13, -10.808, 871.9722; 6.4741e-15, 0.076455, 1 ]
//rot = [ 9.1918, -2.088e-12, -739.9416; 8.5485e-13, -10.3992, 883.6222; 4.5443e-14, 0.091529, 1 ]
//rot = [ 7.8081, -0.19851, -624.45; -3.1666e-13, -10.885, 869.7767; -1.2185e-14, 0.073615, 1 ]
//rot = [ 8.6606, -0.29358, -692.5505; 7.8331e-13, -10.6422, 876.6972; 1.5916e-14, 0.082569, 1 ]
//rot = [ 8.6924, -2.7963e-13, -704.0884; 4.9609e-13, -10.5341, 879.779; -3.2186e-14, 0.086556, 1 ]
//rot = [ 8, 2.4857e-12, -640; -1.1485e-13, -9.6949, 800; -7.4286e-14, 0.079661, 1 ]
//rot = [ 7.3937, -0.18347, -602.893; -0.21952, -9.5379, 701.3257; -0.0005086, 0.080836, 1 ]
//rot = [ 8.1763, -0.15389, -657.3802; -0.1452, -11.2098, 783.8929; 0.00077073, 0.090861, 1 ]
//rot = [ 8.1363, -0.072627, -657.185; -5.9608e-13, -11.3327, 775.1464; -3.2937e-14, 0.088991, 1 ]
//rot = [ 8.48, -0.10709, -681.5844; -0.21278, -11.059, 801.5235; -3.5312e-05, 0.09404, 1 ]
//rot = [ 8.5479, -0.35567, -685.3886; -0.3559, -9.7782, 750.043; -0.0014829, 0.095964, 1 ]
//rot = [ 9.3947, -0.037984, -754.02; -0.23816, -11.8002, 844.9807; -0.00099232, 0.11049, 1 ]
//rot = [ 11.0633, 0.23713, -893.4717; -0.063825, -14.6644, 1022.038; 0.00039796, 0.12874, 1 ]
//rot = [ 11.7064, -0.13049, -941.0501; -0.30855, -15.0961, 1067.0724; -0.0012856, 0.13976, 1 ]
//rot = [ 9.8675, -0.24874, -754.906; -0.18957, -13.308, 953.5467; -0.00078986, 0.1122, 1 ]
//rot = [ 9.5838, -0.34968, -729.5553; -0.11519, -12.3402, 881.4196; 6.6851e-05, 0.1044, 1 ]
//rot = [ 9.195, -0.2707, -708.4415; -0.17441, -11.9427, 856.0045; -0.0007267, 0.10118, 1 ]
//rot = [ 10.1829, -0.66258, -780.8888; -0.3288, -12.8942, 953.7194; -0.0019699, 0.11542, 1 ]
//rot = [ 9.0507, -0.27402, -693.9475; -0.22379, -11.9689, 815.3404; -0.00079926, 0.10866, 1 ]
//rot = [ 7.2389, -0.23496, -561.3638; -0.23952, -10.1499, 686.5061; -0.0011976, 0.075991, 1 ]
//rot = [ 7.4908, -0.20305, -583.233; 0.0056031, -9.0148, 709.9014; 0.00041172, 0.075551, 1 ]
//rot = [ 7.5727, -0.14236, -597.6765; -7.1469e-14, -10.5429, 618.6448; 3.8002e-15, 0.058124, 1 ]
//rot = [ 8.7759, -0.034007, -706.0253; -4.4018e-13, -13.0051, 777.3446; -7.8814e-15, 0.091558, 1 ]
//rot = [ 9.1575, -0.30233, -744.6782; -0.081932, -10.4259, 852.1753; -0.00076251, 0.071736, 1 ]
//rot = [ 11.9777, -0.24644, -970.3664; -0.024966, -13.0308, 1157.0751; -0.0013771, 0.10351, 1 ]
//rot = [ 17.0479, -0.36608, -1382.3731; -1.5866e-12, -18.1461, 1644.3678; 1.5099e-15, 0.15035, 1 ]
#define DOWN_COL           4                //横向提取边沿的移动列数
#define END_COL            15               //横向提取边沿谁，向前搜索结束行的最大列宽
#define MIDDLE_DOWN_NUM    30               //横向提取边沿的设定个数

/*----------------------------------------------------------------------*/

/*------------------------------变量声明区------------------------------*/

typedef struct
{
      double x;
      double y;
} Site_xy;         //定义浮点型结构体

typedef struct
{
      int16 x;
      int16 y;
} Site_xy1;        //定义整型结构体

extern double wide;                      //逆透视图像赛道宽度
extern uint8 inv_look_flag;
extern int16 midline[CAMERA_H];           //原始图像中心线
extern Site_xy inv_left_edge[CAMERA_H];   //逆透视图像左边沿坐标数组
extern Site_xy inv_right_edge[CAMERA_H];  //逆透视图像右边沿坐标数组
extern Site_xy inv_midline[CAMERA_H];     //逆透视图像中线坐标数组

extern int16 midline_down_x[MIDDLE_DOWN_NUM];    //横向提取边沿的原始坐标
extern int16 midline_down_y[MIDDLE_DOWN_NUM];    //横向提取边沿的原始坐标
extern uint8 midline_down_num;                   //横向提取边沿的实际个数

/*----------------------------------------------------------------------*/

/*------------------------------函数声明区------------------------------*/

extern void midline_extract(); //提取中线主函数

extern void tingche();         //出界停车函数
extern void tingche2();        //出界停车函数2

extern void edge_add();        //边沿添加函数
extern void midline_add();     //中线添加函数
extern void jizhun_add();      //基准线添加函数

extern void get_inv_edge();    //获取逆透视边沿坐标函数

extern Site_xy get_inv_img(int16 xxx ,int16 yyy);         //逆透视（xxx为图像行，yyy为列）
extern Site_xy1 get_invinv_img(double xxx,double yyy);  //反逆透视（xxx为实际行，yyy为列）

/*----------------------------------------------------------------------*/













#endif


